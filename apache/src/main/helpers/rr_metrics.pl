#!perl

#generate request/response metrics
#see WWW-MIB.txt
use strict;

my %method_map;

#convert OIDs (after the __END__ below) to string
while (my $oid = <DATA>) {
    chomp $oid;
    my(@oid) = grep { /[A-Z_]/ } map { chr } split(/\./, $oid);
    my $method = join '', @oid;
    $method_map{$method} = $oid;
}

my(%request_metrics) = (
   wwwRequestInRequests => 'Number of $type Requests',
   wwwRequestInBytes => 'Bytes Received for $type Requests',
   #wwwRequestInLastTime => 'Last Time Request Received for $type',

   #these are in the WWW-MIB.txt but don't seem to be supported
   #wwwRequestOutBytes => 'Bytes Sent for $type Requests',
   #how is this different from wwwRequestInRequests?
   #wwwRequestOutRequests => 'Number of Responses to $type Requests',
   #wwwRequestOutLastTime => 'Last Time Response Sent for $type',
);

my(%methods) = (
    GET => 'true',
    POST => 'true',
    HEAD => 'false',
    PUT => 'false',
    TRACE => 'false',
    CONNECT => 'false',
    OPTIONS => 'false',
);

my(@methods) =
  qw(GET POST HEAD PUT TRACE CONNECT OPTIONS
     COPY LOCK MOVE LABEL MERGE MKCOL
     PATCH DELETE REPORT UNLOCK UPDATE
     CHECKIN CHECKOUT PROPFIND PROPPATCH
     MKACTIVITY UNCHECKOUT MKWORKSPACE
     VERSION_CONTROL BASELINE_CONTROL);

#off by default
my(%methods) = map { $_, 'false' } @methods;

#on by default
my(@default_methods) = qw(HEAD GET POST PUT);

for (@default_methods) {
    $methods{$_} = 'true';
}

my(%response_metrics) = (
   #these are in the WWW-MIB.txt but don't seem to be supported
   #how is this different from wwwResponseOutResponses?
   #wwwResponseInResponses  => 'Number of Requests Responded with $type',
   #wwwResponseInBytes      => 'Bytes Received for $type Responses',
   #wwwResponseInLastTime   => 'Last Time Request Received Responsed with $type',

   wwwResponseOutResponses => 'Number of $type Responses',
   wwwResponseOutBytes     => 'Bytes Sent for $type Responses',
   #wwwResponseOutLastTime  => 'Last Time $type Response Sent',
);

#these are the ones that showup in snmpwalk
my(@rc) = (100..102,
           200..207,
           300..305, 307,
           400..417, 422..424,
           500..504, 506, 507, 510);

#off by default
my(%rc) = map { $_, 'false' } @rc;

#on by default
my(@default_rc) = (200, 301, 302, 401, 403, 404, 500);

for (@default_rc) {
    $rc{$_} = 'true';
}

my(%units) = (
    InBytes => 'B',
    OutBytes => 'B',
);

my(%collType) = ();

print "  <!-- start properties generated by $0 -->\n\n";

for my $snmpVar (sort keys %request_metrics,
                 sort keys %response_metrics) {
    print <<EOF;
  <property name="$snmpVar"
            value="\${snmp.config}:$snmpVar:\${oid.config}"/>

EOF
}

for my $method (sort keys %methods) {
    print <<EOF;
  <property name="$method"
            value="$method_map{$method}"/>

EOF
}

print "  <!-- end properties generated by $0 -->\n\n";

print <<EOF;
  <!-- start metrics generated by $0 -->
  <metrics name="request-response-metrics">
EOF

sub generate {
    my($metrics, $types, $prefix) = @_;

    for my $snmpVar (sort keys %$metrics) {
        my $description = $metrics->{$snmpVar};

        for my $type (sort keys %$types) {
            my $default = $types->{$type};

            next unless $default eq 'true'; #XXX currently too many

            (my $alias = $snmpVar) =~ s/^$prefix//;
            (my $name = $description) =~ s/\$type/$type/;
            my $tmpl = $type;
            unless ($tmpl =~ /^\d+$/) {
                $tmpl = '${' . $type . '}'; #methods
            }
            my $units = $units{$alias} || 'none';
            my $ctype = $collType{$alias} || 'trendsup';
            print <<EOF;
    <metric name="$name"
            alias="$alias$type"
            template="\${$snmpVar}=$tmpl"
            category="THROUGHPUT"
            defaultOn="$default"
            designate="false"
            units="$units"
            collectionType="$ctype"
            interval="60000"/>
EOF
       }
    }
}

generate(\%request_metrics, \%methods, 'wwwRequest');

generate(\%response_metrics, \%rc, 'wwwResponse');

print <<EOF;
  </metrics>
  <!-- end metrics generated by $0 -->
EOF

#data below extracted from snmpwalk

__END__
3.71.69.84
3.80.85.84
4.67.79.80.89
4.72.69.65.68
4.76.79.67.75
4.77.79.86.69
4.80.79.83.84
5.76.65.66.69.76
5.77.69.82.71.69
5.77.75.67.79.76
5.80.65.84.67.72
5.84.82.65.67.69
6.68.69.76.69.84.69
6.82.69.80.79.82.84
6.85.78.76.79.67.75
6.85.80.68.65.84.69
7.67.72.69.67.75.73.78
7.67.79.78.78.69.67.84
7.79.80.84.73.79.78.83
8.67.72.69.67.75.79.85.84
8.80.82.79.80.70.73.78.68
9.80.82.79.80.80.65.84.67.72
10.77.75.65.67.84.73.86.73.84.89
10.85.78.67.72.69.67.75.79.85.84
11.77.75.87.79.82.75.83.80.65.67.69
15.86.69.82.83.73.79.78.95.67.79.78.84.82.79.76
16.66.65.83.69.76.73.78.69.95.67.79.78.84.82.79.76
