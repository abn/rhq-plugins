<?xml version="1.0" encoding="UTF-8" ?>

<plugin name="CLI"
        displayName="Command Line Interface"
        package="org.rhq.plugins.cli"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:xmlns:rhq-plugin"
        xmlns:c="urn:xmlns:rhq-configuration">


   <server name="CLI Server"
           discovery="CliDiscoveryComponent"
           class="CliServerComponent"
           description="A resource with a command line as its management interface"
           supportsManualAdd="true">

      <plugin-configuration>
         <c:group name="cliEnvironment" displayName="Command Line Executable Runtime Environment">
            <c:simple-property name="executable" required="true" description="The full path to the command line executable" />
            <c:simple-property name="workingDirectory" required="false" description="When the executable is invoked, this will be its working directory." />
            <c:list-property name="environmentVariables" required="false" description="Environment variables that are set when executing the CLI process">
               <c:map-property name="environmentVariable">
                  <c:simple-property name="name" type="string" required="true" summary="true" description="Name of the environment variable"/>
                  <c:simple-property name="value" type="string" required="true" summary="true" description="Value of the environment variable" />
               </c:map-property>
            </c:list-property>
         </c:group>
         <c:group name="avail" displayName="Availability Definition">
            <c:simple-property name="availabilityExecuteCheck" required="false" type="boolean" description="If specified and true, the ability to successfully execute the CLI executable can determine whether or not the managed resource is considered up and available. If you set this to true, you normally do not set the availability regex settings in order to allow availability to be determined based solely on the successful execution, regardless of the exit code or output. If this is false, setting one of the avail regex settings will override it as if it were true."/>
            <c:simple-property name="availabilityExitCodeRegex" required="false" description="If specified, the executable must return an exit code that matches this regular expression if the managed resource is to be considered up and available"/>
            <c:simple-property name="availabilityOutputRegex" required="false" description="If specified, the executable must output text that matches this regular expression if the managed resource is to be considered up and available"/>
            <c:simple-property name="availabilityArguments" required="false" description="If the CLI needs to be executed in order to determine availability, these are the arguments that will be passed to the executable. If you do not specify the regex settings and you set the execute check setting to false, the CLI will not be executed and these arguments will not be used - in this case, availability will be determined by the mere existence of the executable binary."/>
         </c:group>
         <c:group name="version" displayName="Version Definition">
            <c:simple-property name="versionArguments" required="false" description="The arguments to pass to the CLI that will help determine the version of the managed resource"/>
            <c:simple-property name="fixedVersion" required="false" description="If specified, this will be the version of the managed resource - the CLI will not be invoked to determine it." />
         </c:group>
         <c:group name="description" displayName="Description Definition">
            <c:simple-property name="descriptionArguments" required="false" description="The arguments to pass to the CLI that will help determine the managed resource description. This can be arguments to enable verbose version output."/>
            <c:simple-property name="fixedDescription" required="false" description="If specified, this will be the description of the managed resource - the CLI will not be invoked to determine it." />
         </c:group>
      </plugin-configuration>

      <!--
         CHANGE: The process-scan element requests the plugin container provide the discovery component for
                 this resource type with the results of scanning the machine for running processes. If there is
                 no use for this in a given resource type, this entry may be omitted.
      -->
      <!--
      <process-scan name="ScanIdentifier" query="process|basename|match=^java.*,arg|org.jboss.Main|match=.*"/>
      -->

      <!--
         CHANGE: An operation element is added for each operation that may be executed against resources of this type.
                 The parameters element is optional; properties defined within will be displayed to the user when
                 invoking the operation. If the resource has no applicable operations, these elements may be omitted.

         REQUIRED INTERFACE: The resource component for this resource type must implement the OperationFacet interface
                             if any operations are specified.
      -->
      <!--
      <operation name="testSimple"
                 description="Test simple-property configuration element for a resource operation">
         <parameters>
            <c:group name="required" displayName="Required Parameters" hiddenByDefault="false">
               <c:description>All of these properties are required</c:description>
               <c:simple-property name="aNumber" type="integer" required="true" default="42" displayName="A Number" description="A number between 1 and 100, inclusive">
                  <c:constraint>
                     <c:integer-constraint minimum="1" maximum="100"/>
                  </c:constraint>
               </c:simple-property>
            </c:group>
         </parameters>
         <results>
             <c:simple-property name="results" />
         </results>
      </operation>
      -->

      <!--
         CHANGE: For each measurement that should be collected for resources of this type, a metric element is added.
                 In addition to identifying the metric, a default collection interval and whether or not the
                 metric is even collected by default are indicated. If the resource has no measurements to be
                 collected, these elements may be omitted.

         REQUIRED INTERFACE: The resource component for this resource type must implement the MeasurementFacet interface
                             if any metrics are specified.
      -->
      <!--
      <metric property="MeasurementName"
              displayName="The Measurement Name"
              description="Describes what this measurement is actually telling you"
              defaultOn="true"
              defaultInterval="300000"
              category="performance" />
      -->

      <!--
         CHANGE: Resource configuration properties are used to configure resources themselves, as compared to the plugin
                 configuration which refers to the connection to a resource. If the resource-configuration
                 entity is specified, at least one property must be provided.

         REQUIRED INTERFACE: The resource component for this resource type must implement the ConfigurationFacet
                             interface if a resource-configuration element is supplied.
      -->
      <!--
      <resource-configuration>
         <c:simple-property name="port" type="integer" displayName="Port on which to listen" />
      </resource-configuration>
      -->
   </server>
</plugin>
